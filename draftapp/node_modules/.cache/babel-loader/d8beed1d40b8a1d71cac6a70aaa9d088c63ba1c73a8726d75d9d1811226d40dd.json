{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Iwolf\\\\Documents\\\\Draft\\\\draftapp\\\\src\\\\components\\\\SetSelection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function getSets() {\n  try {\n    const response = await axios.get('https://api.scryfall.com/sets', {\n      params: {\n        'set_type': 'core',\n        'order': 'released_at',\n        'dir': 'asc'\n      }\n    });\n    const setArray = response.data.data.map(set => [set.code]);\n    return setArray;\n  } catch (error) {\n    console.error(error);\n  }\n}\nfunction SetSelection(props) {\n  _s();\n  const [selectedSet, setSelectedSet] = useState('');\n  const [isShowingClose, setisShowingClose] = useState(false);\n  const [setCodes, setSetCodes] = useState([]);\n  setSetCodes(getSets);\n  const handleChange = event => {\n    setSelectedSet(event.target.value);\n  };\n  const handleSubmit = () => {\n    if (selectedSet) {\n      props.onStartOpen(selectedSet);\n      setisShowingClose(true);\n    } else {\n      alert('Please select a set');\n    }\n  };\n  const handleClose = () => {\n    if (selectedSet) {\n      props.onClosePack();\n      setisShowingClose(false);\n    } else {\n      alert('Please select a set');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Buttons\",\n    children: [isShowingClose ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"mainButtons\",\n      onClick: handleClose,\n      children: \"Clear\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 27\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"mainButtons\",\n      onClick: handleSubmit,\n      children: \"Open a Pack!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Select a Set:\", /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedSet,\n        onChange: handleChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select a set--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 15\n        }, this), setCodes.map((set, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: set,\n          children: set\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(SetSelection, \"o2wReDab2dMPlgpVhauCF6ymKYg=\");\n_c = SetSelection;\nexport default SetSelection;\nvar _c;\n$RefreshReg$(_c, \"SetSelection\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","getSets","response","get","params","setArray","data","map","set","code","error","console","SetSelection","props","_s","selectedSet","setSelectedSet","isShowingClose","setisShowingClose","setCodes","setSetCodes","handleChange","event","target","value","handleSubmit","onStartOpen","alert","handleClose","onClosePack","className","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","index","_c","$RefreshReg$"],"sources":["C:/Users/Iwolf/Documents/Draft/draftapp/src/components/SetSelection.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nasync function getSets() {\r\n  try {\r\n    const response = await axios.get('https://api.scryfall.com/sets', {\r\n      params: {\r\n        'set_type': 'core',\r\n        'order': 'released_at',\r\n        'dir': 'asc'\r\n      }\r\n    });\r\n  \r\n    const setArray = response.data.data.map(set => [set.code]);\r\n\r\n    return setArray;\r\n    } catch (error) {\r\n    console.error(error);\r\n  }\r\n}\r\n\r\nfunction SetSelection(props) {\r\n  const [selectedSet, setSelectedSet] = useState('');\r\n  const [isShowingClose, setisShowingClose] = useState(false);\r\n  const [setCodes, setSetCodes] = useState([]);\r\n\r\n  setSetCodes(getSets);\r\n\r\n\r\n  const handleChange = (event) => {\r\n    setSelectedSet(event.target.value);\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    if (selectedSet) {\r\n      props.onStartOpen(selectedSet);\r\n      setisShowingClose(true);\r\n    } else {\r\n      alert('Please select a set');\r\n    }\r\n  }\r\n\r\n  const handleClose = () => {\r\n    if (selectedSet) {\r\n      props.onClosePack();\r\n      setisShowingClose(false);\r\n    } else {\r\n      alert('Please select a set');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Buttons\">\r\n      {\r\n        isShowingClose ? (<button type=\"submit\" className=\"mainButtons\" onClick={handleClose}>Clear</button>) :\r\n        (<button type=\"submit\" className=\"mainButtons\" onClick={handleSubmit}>Open a Pack!</button>) \r\n      }\r\n      {\r\n        <label>\r\n          Select a Set:\r\n            <select value={selectedSet} onChange={handleChange}>\r\n              <option value=\"\">--Select a set--</option>\r\n              {setCodes.map((set, index) => (\r\n                <option key={index} value={set}>{set}</option>\r\n              ))}\r\n            </select>\r\n        </label>\r\n      }\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default SetSelection;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}