[{"C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\index.js":"1","C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\reportWebVitals.js":"2","C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\App.js":"3","C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\components\\MagicCard.js":"4","C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\components\\MagicCardLoading.js":"5","C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\components\\SetSelection.js":"6","C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\components\\getCardImage.js":"7"},{"size":535,"mtime":1679361346341,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1679361346350,"results":"10","hashOfConfig":"9"},{"size":4254,"mtime":1682458879030,"results":"11","hashOfConfig":"9"},{"size":1431,"mtime":1682451173112,"results":"12","hashOfConfig":"9"},{"size":1725,"mtime":1682458666475,"results":"13","hashOfConfig":"9"},{"size":2057,"mtime":1682458598762,"results":"14","hashOfConfig":"9"},{"size":590,"mtime":1679439192528,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kqdk5l",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\index.js",[],[],"C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\reportWebVitals.js",[],[],"C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\App.js",["38","39","40","41"],[],"import './App.css';\nimport MagicCard from './components/MagicCard.js';\nimport MagicCardLoading from './components/MagicCardLoading.js';\nimport SetSelection from './components/SetSelection';\nimport getCardImage from './components/getCardImage';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [set, setSet] = useState('');\n  const [setName, setSetName] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isGeneratingPack, setIsGeneratingPack] = useState(false);\n  const [cardsLoaded, setCardsLoaded] = useState(0);\n  \n  async function fetchCards(set) {\n    console.log(\"Fetching cards...\");\n    if (!set) return; // Return early if set is undefined\n    try {\n      \n      const basicLandResponse = [];\n      for (let i = 0; i < 1; i++) {\n        const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  t:basic unique:prints -stamp:arena`);\n        const { name } = await response.json();\n        basicLandResponse.push(await getCardImage(name, 'large', set));\n      }\n\n      const rareMythicResponse = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  (rarity:rare OR rarity:mythic) -stamp:arena`);\n      const { name } = await rareMythicResponse.json();\n      const rareMythic = await getCardImage(name, 'large', set);\n  \n      const uncommons = [];\n      for (let i = 0; i < 3; i++) {\n        const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  rarity:uncommon -stamp:arena`);\n        const { name } = await response.json();\n        uncommons.push(await getCardImage(name, 'large', set));\n      }\n  \n      const commons = [];\n      for (let i = 0; i < 10; i++) {\n        const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  rarity:common -stamp:arena -t:basic`);\n        const { name } = await response.json();\n        commons.push(await getCardImage(name, 'large', set));\n      }\n  \n      const foilChance = Math.random();\n      let foilCard = null;\n      if (foilChance <1) {\n        const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster -stamp:arena`);\n        const { name } = await response.json();\n        foilCard = await getCardImage(name, 'large', set);\n      }\n  \n      const cardImages = [rareMythic, ...uncommons, ...commons, ...basicLandResponse];\n      const randomIndex = Math.floor(Math.random() * cardImages.length);\n      cardImages[randomIndex] = foilCard || cardImages[randomIndex];\n  \n      const cardObjects = cardImages.map((src, index) => {\n        return { src, isFoil: src === foilCard };\n      });\n  \n      console.log(cardObjects.length);\n      setCards(cardObjects);\n    } catch (error) {\n      console.error(error);\n      setCards([]);\n    } finally {\n      setIsLoading(false);\n      setIsGeneratingPack(false);\n    }\n  }\n\n\n  function onStartOpen(setCode, setName) {\n    setCardsLoaded(0);\n    setIsLoading(true);\n    setIsGeneratingPack(true);\n    setSet(setCode);\n    setSetName(setName);\n    fetchCards(setCode);\n    console.log(\"Selected set code %s, and name %s\", setCode, setName);\n  }\n\n  function onClosePack() {\n    setCardsLoaded(0);\n    setIsLoading(false);\n    setIsGeneratingPack(false);\n    setCards([]);\n    setSetName('');\n    setSet('');\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className='cardGrid'>\n        <h1>PackSim</h1>\n        <h4>Magic the Gathering Pack Opening Simulator</h4>\n        <SetSelection onStartOpen={onStartOpen} onClosePack={onClosePack} setIsGeneratingPack={setIsGeneratingPack} />\n        {<div className='cardSelection'>\n          {isGeneratingPack ?(\n            <div className =\"center\">\n              <MagicCardLoading src={'https://i.imgur.com/9isqh6C.png'} name={setName} isFoil={false} alt={'Your pack is loading...'}/>\n            </div>\n          ):\n          (\n            <div className=\"card-grid\">\n              {cards.map((card, index) => (\n                <MagicCard key={index} src={card.src}  isFoil={card.isFoil} alt={`Card ${index + 1}`} />\n              ))}\n            </div>\n          ) }\n        </div>}\n      </div> \n\n      \n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\components\\MagicCard.js",[],[],"C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\components\\MagicCardLoading.js",[],[],"C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\components\\SetSelection.js",[],[],"C:\\Users\\Iwolf\\Documents\\Github\\PackSim\\src\\components\\getCardImage.js",[],[],{"ruleId":"42","severity":1,"message":"43","line":6,"column":27,"nodeType":"44","messageId":"45","endLine":6,"endColumn":36},{"ruleId":"42","severity":1,"message":"46","line":10,"column":10,"nodeType":"44","messageId":"45","endLine":10,"endColumn":13},{"ruleId":"42","severity":1,"message":"47","line":12,"column":10,"nodeType":"44","messageId":"45","endLine":12,"endColumn":19},{"ruleId":"42","severity":1,"message":"48","line":14,"column":10,"nodeType":"44","messageId":"45","endLine":14,"endColumn":21},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'set' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'cardsLoaded' is assigned a value but never used."]