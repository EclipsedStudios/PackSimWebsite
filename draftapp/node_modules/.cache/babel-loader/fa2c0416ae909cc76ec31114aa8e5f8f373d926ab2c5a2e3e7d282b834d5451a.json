{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport getCardImage from './getCardImage';\nfunction BoosterPack(_ref) {\n  _s();\n  let {\n    set\n  } = _ref;\n  const [cards, setCards] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [progress, setProgress] = useState(0);\n  var steps = 0;\n  useEffect(() => {\n    async function fetchCards() {\n      if (!set) return; // Return early if set is undefined\n      setIsLoading(true);\n      try {\n        const basicLandResponse = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  t:basic unique:prints -stamp:arena`);\n        const {\n          name\n        } = await basicLandResponse.json();\n        const basicLand = await getCardImage(name, 'large', set);\n        steps++;\n        setProgress(steps / 15 * 100);\n        const rareMythicResponse = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  (rarity:rare OR rarity:mythic) -stamp:arena`);\n        const {\n          name: rareMythicName\n        } = await rareMythicResponse.json();\n        const rareMythic = await getCardImage(rareMythicName, 'large', set);\n        steps++;\n        setProgress(steps / 15 * 100);\n        const uncommons = [];\n        for (let i = 0; i < 3; i++) {\n          const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  rarity:uncommon -stamp:arena`);\n          const {\n            name\n          } = await response.json();\n          steps++;\n          setProgress(steps / 15 * 100);\n          uncommons.push(await getCardImage(name, 'large', set));\n        }\n        const commons = [];\n        for (let i = 0; i < 10; i++) {\n          const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  rarity:common -stamp:arena`);\n          const {\n            name\n          } = await response.json();\n          steps++;\n          setProgress(steps / 15 * 100);\n          commons.push(await getCardImage(name, 'large', set));\n        }\n        const foilChance = Math.random();\n        let foilCard;\n        if (foilChance < 0.33) {\n          const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster -stamp:arena`);\n          const {\n            name\n          } = await response.json();\n          foilCard = await getCardImage(name, 'large', set);\n        }\n        const cardImages = [rareMythic, ...uncommons, ...commons, basicLand];\n        const randomIndex = Math.floor(Math.random() * cardImages.length);\n        cardImages[randomIndex] = foilCard || cardImages[randomIndex];\n        setCards(cardImages);\n      } catch (error) {\n        console.error(error);\n      }\n      setIsLoading(false);\n    }\n    fetchCards();\n  }, [set]);\n}\n_s(BoosterPack, \"T9QLyy0Lbg0XYov6JEYSMsTglm0=\");\n_c = BoosterPack;\nexport default BoosterPack;\nvar _c;\n$RefreshReg$(_c, \"BoosterPack\");","map":{"version":3,"names":["React","useState","useEffect","getCardImage","BoosterPack","_ref","_s","set","cards","setCards","isLoading","setIsLoading","progress","setProgress","steps","fetchCards","basicLandResponse","fetch","name","json","basicLand","rareMythicResponse","rareMythicName","rareMythic","uncommons","i","response","push","commons","foilChance","Math","random","foilCard","cardImages","randomIndex","floor","length","error","console","_c","$RefreshReg$"],"sources":["C:/Users/Iwolf/Documents/Draft/draftapp/src/components/BoosterPack.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport getCardImage from './getCardImage';\r\n\r\nfunction BoosterPack({ set }) {\r\n  const [cards, setCards] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  var steps = 0;\r\n\r\n  useEffect(() => {\r\n    async function fetchCards() {\r\n        if (!set) return; // Return early if set is undefined\r\n        setIsLoading(true);\r\n        try {\r\n          const basicLandResponse = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  t:basic unique:prints -stamp:arena`);\r\n          const { name } = await basicLandResponse.json();\r\n          const basicLand = await getCardImage(name, 'large', set);\r\n          steps++;\r\n          setProgress(steps / 15 * 100);\r\n    \r\n          const rareMythicResponse = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  (rarity:rare OR rarity:mythic) -stamp:arena`);\r\n          const { name: rareMythicName } = await rareMythicResponse.json();\r\n          const rareMythic = await getCardImage(rareMythicName, 'large', set);\r\n          steps++;\r\n          setProgress(steps / 15 * 100);\r\n    \r\n          const uncommons = [];\r\n          for (let i = 0; i < 3; i++) {\r\n            const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  rarity:uncommon -stamp:arena`);\r\n            const { name } = await response.json();\r\n            steps++;\r\n            setProgress(steps / 15 * 100);\r\n            uncommons.push(await getCardImage(name, 'large', set));\r\n          }\r\n    \r\n          const commons = [];\r\n          for (let i = 0; i < 10; i++) {\r\n            const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster  rarity:common -stamp:arena`);\r\n            const { name } = await response.json();\r\n            steps++;\r\n            setProgress(steps / 15 * 100);\r\n            commons.push(await getCardImage(name, 'large', set));\r\n          }\r\n    \r\n          const foilChance = Math.random();\r\n          let foilCard;\r\n          if (foilChance < 0.33) {\r\n            const response = await fetch(`https://api.scryfall.com/cards/random?q=set:${set} is:booster -stamp:arena`);\r\n            const { name } = await response.json();\r\n            foilCard = await getCardImage(name, 'large', set);\r\n          }\r\n    \r\n          const cardImages = [rareMythic, ...uncommons, ...commons, basicLand];\r\n          const randomIndex = Math.floor(Math.random() * cardImages.length);\r\n          cardImages[randomIndex] = foilCard || cardImages[randomIndex];\r\n    \r\n          setCards(cardImages);\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n        setIsLoading(false);\r\n    }\r\n    \r\n    fetchCards();\r\n  }, [set]);\r\n}\r\n\r\nexport default BoosterPack;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}